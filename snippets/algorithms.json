{
    "The Sieve of Eratosthenes": {
        "scope": "javascript,typescript",
        "prefix": "primesGenerator",
        "body": [
            "// The Sieve of Eratosthenes",
            "function generatePrimes(n) {",
            "\t// create array of size n",
            "\tvar primes = [];",
            "\tfor(var i = 0; i < n; i++) {",
            "\t\tprimes.push(true);",
            "\t}",
            "\t// 0 and 1 are not prime",
            "\tprimes[0] = false;",
            "\tprimes[1] = false;",
            "",
            "\t// loop through all numbers from 2 to sqrt(n)",
            "\tvar sqrtN = Math.sqrt(n);",
            "\tfor(var i = 2; i <= sqrtN; i++) {",
            "\t\t// if i is prime",
            "\t\tif(primes[i]) {",
            "\t\t\t// loop through all multiples of i and mark them as not prime",
            "\t\t\tfor(var j = i * i; j < n; j += i) {",
            "\t\t\t\tprimes[j] = false;",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\t// return all primes",
            "\tvar result = [];",
            "\tfor(var i = 0; i < n; i++) {",
            "\t\tif(primes[i]) {",
            "\t\t\tresult.push(i);",
            "\t\t}",
            "\t}",
            "\treturn result;",
            "}"
        ]
    },
    "Prime factorization": {
        "scope": "javascript,typescript",
        "prefix": "primeFactorization",
        "body": [
            "// Simple prime factorization",
            "function primeFactors(n) {",
            "\t// array to hold all the prime factors",
            "\tvar factors = [];",
            "\t// check all natural numbers from 2 to square root of n",
            "\tvar sqrtN = Math.sqrt(n);",
            "\tfor (var i = 2; i <= sqrtN; i++) {",
            "\t\t// check how manu times i divides n",
            "\t\twhile (n % i === 0) {",
            "\t\t\t// add i to the array",
            "\t\t\tfactors.push(i);",
            "\t\t\t// divide n by i",
            "\t\t\t// use floor division to get the integer",
            "\t\t\tn = Math.floor(n / i);",
            "",
            "\t\t\t// if n is 1, then we are done",
            "\t\t\tif (n == 1) {",
            "\t\t\t\treturn factors;",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\t// if n is greater than 1, then add n to the array",
            "\tif (n > 1) {",
            "\t\tfactors.push(n);",
            "\t}",
            "",
            "\treturn factors;",
            "}"
        ],
        "description": "Prime factorization of number"
    },
    "Check if number is prime": {
        "scope": "javascript,typescript",
        "prefix": "isPrime",
        "body": [
            "// Check if number is prime",
            "function isPrime(n) {",
            "\t// if number is less than 2 or not an integer then by definition cannot be prime",
            "\tif (n < 2 || n % 1 != 0) {",
            "\t\treturn false;",
            "\t}",
            "\t// otherwise check if divisible by any number under the square root of the number",
            "\t// if so then it is not prime",
            "\tfor (var i = 2; i <= Math.sqrt(n); i++) {",
            "\t\tif (n % i == 0) {",
            "\t\t\treturn false;",
            "\t\t}",
            "\t}",
            "\t// otherwise it is prime",
            "\treturn true;",
            "}"
        ],
        "description": "Check if number is prime"
    }
}