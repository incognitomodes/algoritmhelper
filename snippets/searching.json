{
    "Binary search": {
		"scope": "javascript,typescript",
		"prefix": "binarySearch",
		"body": [
            "// array must be sorted",
            "function binarySearch(arr, target) {",
            "\t// find the midpoint of the array",
            "\tlet midpoint = Math.floor(arr.length / 2);",
            "\t// if the midpoint is the target, return the index",
            "\tif (arr[midpoint] === target) {",
            "\t\treturn midpoint;",
            "\t}",
            "\t// if the midpoint is greater than the target, search the left half",
            "\tif (arr[midpoint] > target) {",
            "\t\treturn binarySearch(arr.slice(0, midpoint), target);",
            "\t}",
            "\t// if the midpoint is less than the target, search the right half",
            "\tif (arr[midpoint] < target) {",
            "\t\treturn binarySearch(arr.slice(midpoint + 1), target);",
            "\t}",
            "}"
		],
		"description": "Binary search"
	},
    "Interpolation search": {
        "scope": "javascript,typescript",
        "prefix": "interpolationSearch",
        "body": [
            "// array must be sorted",
            "function interpritationSearch(arr, target) {",
            "\t// index of the leftmost element",
            "\tlet idxStart = 0;",
            "\t// index of the rightmost element",
            "\tlet idxEnd = arr.length - 1;",
            "",
            "\t// helper variable to keep track of the middle index",
            "\tlet idxMiddle;",
            "",
            "\twhile (arr[idxStart] <= target && target <= arr[idxEnd]) {",
            "\t\t// find the middle index (interpolation search)",
            "\t\tidxMiddle = idxStart + (idxEnd - idxStart) * (target - arr[idxStart]) / (arr[idxEnd] - arr[idxStart]);",
            "",
            "\t\t// if the middle index is the target, return the index",
            "\t\tif (arr[idxMiddle] === target) {",
            "\t\t\treturn idxMiddle;",
            "\t\t}",
            "",
            "\t\tif (target < arr[idxMiddle]) {",
            "\t\t\t// if the target is less than the middle index, search the left half",
            "\t\t\tidxEnd = idxMiddle - 1;",
            "\t\t} else {",
            "\t\t\t// if the target is greater than the middle index, search the right half",
            "\t\t\tidxStart = idxMiddle + 1;",
            "\t\t}",
            "\t}",
            "\t// target not found, return -1",
            "\treturn -1;",
            "}"            
        ],
        "description": "Interpolation search"
    },
    "Find array leader": {
        "scope": "javascript,typescript",
        "prefix": "findLeader",
        "body": [
            "// finding leader of array (element that occurs > n/2 times)",
            "function findLeader(arr) {",
            "\t// array length",
            "\tvar n = arr.length;",
            "\t// helper variable to store the current leader and its count",
            "\tvar count = 0;",
            "\tvar leader = NaN;",
            "\t// iterate through the array",
            "\tfor (var i = 0; i < n; i++) {",
            "\t\t// if count is greater than 0",
            "\t\tif (count > 0) {",
            "\t\t\t// if current element is equal to leader then increment count",
            "\t\t\t// else decrement count",
            "\t\t\tif (leader == arr[i]) {",
            "\t\t\t\tcount++;",
            "\t\t\t} else {",
            "\t\t\t\tcount--;",
            "\t\t\t}",
            "\t\t} else {",
            "\t\t\t// if count is 0 then set leader as current element",
            "\t\t\tleader = arr[i];",
            "\t\t\tcount = 1;",
            "\t\t}",
            "\t}",
            "\t// if count is equal to 0 then there is no leader",
            "\tif (count == 0) {",
            "\t\treturn NaN;",
            "\t}",
            "\t// iterate through the array again to find the count of leader",
            "\tcount = 0;",
            "\tfor (var i = 0; i < n; i++) {",
            "\t\tif (arr[i] == leader) {",
            "\t\t\tcount++;",
            "\t\t}",
            "\t}",
            "\t// if count is greater than n/2 then return leader",
            "\tif (count > n / 2) {",
            "\t\treturn leader;",
            "\t}",
            "\t// else return NaN",
            "\treturn NaN;",
            "}"
        ],
        "description": "Find array leader"
    }
}